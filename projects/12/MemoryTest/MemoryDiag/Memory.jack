// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048; // heap base address
        let heap[0] = 0; // next
        let heap[1] = 14334; // length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int current, next, length, block;
        let current = 0;
        let next = heap[0];
        let length = heap[1];
        // If next is 0, then the list is to the end.
        while ((length < (size + 2)) & (~(next = 0))) {
            let current = next;
            let length = heap[next + 1];
            let next = heap[next];
        }
        let block = current + 2 + length - size;
        let heap[block - 1] = size;
        let heap[block - 2] = 0;
        let heap[current + 1] = length - size - 2;
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int current, next;
        let current = 0;
        let next = heap[0];
        while (~(next = 0)) {
            let current = next;
            let next = heap[next];
        }
        let heap[current] = o - 2;
        let o[-2] = 0;
        return;
    }
}
